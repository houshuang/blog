#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

compile '/stylesheet/*' do
  # don’t filter or layout
end

compile '/js/*' do
  # don’t filter or layout
end

compile '/posts/*', :rep => :default do
  filter :fix_images
  filter :replacements
  filter :redcarpet, options: {:fenced_code_blocks => true, :tables => true, :no_intra_emphasis => true,
    :autolink => true, :strikethrough => true, :superscript => true}
  filter :colorize_syntax, :default_colorizer => :pygmentsrb
  layout 'post'
end

compile '/pages/*', :rep => :default do
  filter :fix_images
  filter :replacements
  filter :redcarpet, options: {:fenced_code_blocks => true, :tables => true, :no_intra_emphasis => true,
    :autolink => true, :strikethrough => true, :superscript => true}
  filter :colorize_syntax, :default_colorizer => :pygmentsrb
  layout 'page_category'
end

compile '/posts/*', :rep => :md do
  layout 'markdown'
end

compile '/pages/*', :rep => :md do
  layout 'markdown'
end


compile '*' do
  if item.binary?
    # don’t filter binary items
  else
    filter :erb
    layout 'page'
  end
end

route '/stylesheet/*' do
  "/nanoc/css/#{item.identifier.split("/").last}.css"
end

route '/js/*' do
  "/nanoc/js/#{item.identifier.split("/").last}.js"
end

route '/posts/*', :rep => :default do
  y,m,d,slug = /([0-9]+)\-([0-9]+)\-([0-9]+)\-([^\/]+)/.match(item.identifier).captures

  "/nanoc/#{y}/#{m}/#{d}/#{slug}/index.html"
end

route '/posts/*', :rep => :md do
  y,m,d,slug = /([0-9]+)\-([0-9]+)\-([0-9]+)\-([^\/]+)/.match(item.identifier).captures

  "/nanoc/#{y}/#{m}/#{d}/#{slug}/index.md"
end

route '/pages/*', :rep => :default do
  "/nanoc/#{item.identifier.split("/").last}/index.html"
end

route '/pages/*', :rep => :md do
  "/nanoc/#{item.identifier.split("/").last}/index.md"
end

route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    "/nanoc/" + item.identifier + 'index.html'
  end
end

layout '*', :erb
